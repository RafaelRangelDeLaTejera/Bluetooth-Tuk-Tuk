
RCTukTuk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8e:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
int in4 = 4;

void setup(){
	
	// Set all the motor control pins to outputs
	DDRB |= (1 << DDB0); //in1
  96:	84 b1       	in	r24, 0x04	; 4
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB1); //in2
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB2); //in3
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB3);//in4
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	84 b9       	out	0x04, r24	; 4
	
	DDRB |= (1 << DDB4); //enA
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB5); //enB
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	84 b9       	out	0x04, r24	; 4
  ba:	08 95       	ret

000000bc <demoOne>:
{
	
	// This function will run the motors in both directions at a fixed speed
	
	// Turn on motor A
	PORTB |= (1 << 1);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 0);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	85 b9       	out	0x05, r24	; 5
	
	// Set speed to 200 out of possible range 0~255
	
	PORTB |= (1 << 4);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	85 b9       	out	0x05, r24	; 5
	
	// Turn on motor B
	
	PORTB |= (1 << 3);
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 2);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	85 b9       	out	0x05, r24	; 5
	
	// Set speed to 200 out of possible range 0~255
	
	PORTB |= (1 << 5);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <main>:



int main(void)
{
	setup();
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
	demoOne();
  e6:	0e 94 5e 00 	call	0xbc	; 0xbc <demoOne>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x8>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
